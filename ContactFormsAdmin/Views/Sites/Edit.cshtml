@model ContactFormsAdmin.Models.Site
@{
    ViewData["Title"] = "Edit Site";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2>Edit Site: @Model.Name</h2>
    <a href="@Url.Action("Index")" class="btn btn-secondary">
        <i class="fas fa-arrow-left"></i> Back to Sites
    </a>
</div>

<div class="row">
    <div class="col-lg-8">
        <div class="card">
            <div class="card-body">
                @using (Html.BeginForm("Edit", "Sites", FormMethod.Post, new { @class = "needs-validation", novalidate = "novalidate" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(m => m.Id)
                    @Html.HiddenFor(m => m.CreatedAt)

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                @Html.LabelFor(m => m.SiteId, new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.SiteId, new { @class = "form-control", @readonly = "readonly" })
                                @Html.ValidationMessageFor(m => m.SiteId, "", new { @class = "invalid-feedback" })
                                <div class="form-text">
                                    Site ID cannot be changed after creation.
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                @Html.LabelFor(m => m.Name, new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.Name, new { @class = "form-control", placeholder = "e.g., My Website Contact Form" })
                                @Html.ValidationMessageFor(m => m.Name, "", new { @class = "invalid-feedback" })
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        @Html.LabelFor(m => m.Description, new { @class = "form-label" })
                        @Html.TextAreaFor(m => m.Description, new { @class = "form-control", rows = 2, placeholder = "Optional description of this site..." })
                        @Html.ValidationMessageFor(m => m.Description, "", new { @class = "invalid-feedback" })
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                @Html.LabelFor(m => m.ToEmail, new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.ToEmail, new { @class = "form-control", type = "email", placeholder = "contact@example.com" })
                                @Html.ValidationMessageFor(m => m.ToEmail, "", new { @class = "invalid-feedback" })
                                <div class="form-text">
                                    Email address where contact form submissions will be sent.
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                @Html.LabelFor(m => m.FromEmail, new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.FromEmail, new { @class = "form-control", type = "email", placeholder = "noreply@example.com" })
                                @Html.ValidationMessageFor(m => m.FromEmail, "", new { @class = "invalid-feedback" })
                                <div class="form-text">
                                    Email address that will appear as the sender.
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        @Html.LabelFor(m => m.RedirectUrl, new { @class = "form-label" })
                        @Html.TextBoxFor(m => m.RedirectUrl, new { @class = "form-control", placeholder = "/thank-you" })
                        @Html.ValidationMessageFor(m => m.RedirectUrl, "", new { @class = "invalid-feedback" })
                        <div class="form-text">
                            URL path to redirect users after successful form submission.
                        </div>
                    </div>

                    <div class="mb-3">
                        @Html.LabelFor(m => m.AllowedOrigins, new { @class = "form-label" })
                        @Html.TextAreaFor(m => m.AllowedOrigins, new { @class = "form-control", rows = 3, placeholder = "https://mysite.com,https://www.mysite.com" })
                        @Html.ValidationMessageFor(m => m.AllowedOrigins, "", new { @class = "invalid-feedback" })
                        <div class="form-text">
                            Comma-separated list of allowed origins for CORS.
                        </div>
                    </div>

                    <div class="mb-3">
                        @Html.LabelFor(m => m.Secret, new { @class = "form-label" })
                        @Html.TextBoxFor(m => m.Secret, new { @class = "form-control", placeholder = "Optional HMAC secret key..." })
                        @Html.ValidationMessageFor(m => m.Secret, "", new { @class = "invalid-feedback" })
                        <div class="form-text">
                            Optional secret key for HMAC signature validation.
                        </div>
                    </div>

                    <div class="form-check mb-3">
                        @Html.CheckBoxFor(m => m.IsActive, new { @class = "form-check-input" })
                        @Html.LabelFor(m => m.IsActive, "Active", new { @class = "form-check-label" })
                        <div class="form-text">
                            Only active sites will accept form submissions.
                        </div>
                    </div>

                    <div class="d-flex gap-2">
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-save"></i> Update Site
                        </button>
                        <a href="@Url.Action("Index")" class="btn btn-secondary">Cancel</a>
                    </div>
                }
            </div>
        </div>
    </div>
    
    <div class="col-lg-4">
        <div class="card">
            <div class="card-header">
                <h6 class="mb-0">Site Information</h6>
            </div>
            <div class="card-body">
                <p class="small"><strong>Created:</strong> @Model.CreatedAt.ToString("MMM dd, yyyy 'at' h:mm tt")</p>
                <p class="small"><strong>Last Updated:</strong> @Model.UpdatedAt.ToString("MMM dd, yyyy 'at' h:mm tt")</p>
                <p class="small"><strong>Status:</strong> 
                    @if (Model.IsActive)
                    {
                        <span class="badge bg-success">Active</span>
                    }
                    else
                    {
                        <span class="badge bg-danger">Inactive</span>
                    }
                </p>
                
                <hr>
                
                <p class="small"><strong>API Endpoint:</strong></p>
                <pre class="bg-light p-2 rounded small"><code>POST /api/v1/contact/@Model.SiteId</code></pre>
            </div>
        </div>
        
        <div class="card mt-3">
            <div class="card-header">
                <h6 class="mb-0">Testing</h6>
            </div>
            <div class="card-body">
                <p class="small">Test your form configuration:</p>
                <div class="d-grid">
                    <a href="/test-form/@Model.SiteId" target="_blank" class="btn btn-outline-primary btn-sm">
                        <i class="fas fa-external-link-alt"></i> Open Test Form
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>